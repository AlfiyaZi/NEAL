Simple Example
==============

To start with a contrived example, let's look at what the process to writing a simple rule, such as the one in the `"Getting Started" <..>`_ section, is like.

Just to recall, we want to forbid the use of `Forced-Values in Swift`__, which have the following form:

__ https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Expressions.html#//apple_ref/doc/uid/TP40014097-CH32-ID404

.. code-block:: swift

  <expression>!

In the original example we picked used ``(nil as Int?)`` as our ``<expression>``, but in order to minimise our example, let's use the simplest possible expression: an identifier.

.. code-block:: swift

  x!

The rules closely follows the AST, so let's take a look into what the AST looks like. NEAL provides a convenient way of quickly inspecting the AST for a given snippet:

.. code-block:: bash

  $ echo 'x!' | neal --stdin swift --print-ast

And the output should look something like the following [1]_:

.. code-block:: javascript

  [
    ForcedValueExpression {
      Expression = Identifier {
        Value = "x"
      }
    }
  ]

The name of the top-level node is ``ForcedValueExpression``, and that's all we need to write our rule:

We start by giving our rule a name:

.. code-block:: rust

  rule NoForcedValues { }

Now we can add a top-level matcher, that will target the ``Swift`` provider, as this is a Swift check:

.. code-block:: rust

  rule NoForcedValues {
    Swift::
  }

We add the name of the AST node we just inspected:

.. code-block:: rust

  rule NoForcedValues {
    Swift::ForcedValueExpression
  }

Now all we need to do is add an action for when this pattern is matched.

The two builtin actions are `fail` and `warn`, and both of them take a explanation message. Let's use `fail` for this example:

.. code-block:: rust

  rule NoForcedValues {
    Swift::ForcedValueExpression {
      fail("Force unwrapping optionals is not allowed. Please refactor your code to use `?` instead of `!`")
    }
  }

Now, if we save our rule in a ``test.rules`` file, and save our test case in a ``test.swift`` file, we can run NEAL as follows:

.. code-block:: bash

  $ neal --rules test.rules test.swift

And the output should look something like:

.. code-block:: bash

  On file test.swift: (NoForcedValues)

    1 | x!
    ~ |  ^

  error: Force unwrapping optionals is not allowed. Please refactor your code to use `?` instead of `!`

That's it: this was the exact process we went through in order to create this rule when adding it to the Getting Started section.

.. [1] Some metadata, such as source location per node, was omitted for brevity.
